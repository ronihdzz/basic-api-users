name: CI

on:
  push:
    branches:
      - main
      - development
      - staging
  pull_request:
    branches:
      - main
      - development
      - staging

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and run tests
        run: |
          docker build -f deployments/tests/Dockerfile.test -t basic-api-feelings-test .
          docker run --rm \
            -v ${{ github.workspace }}/deployments/tests/reports:/application/src/reports \
            basic-api-feelings-test

      - name: Save artifacts to artifacts branch
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          COMMIT_ID: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
          REPO_NAME: ${{ github.repository }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          git clone https://${GH_TOKEN}@github.com/${REPO_NAME}.git artifacts-repo
          cd artifacts-repo
          git checkout artifacts || git checkout --orphan artifacts
          mkdir -p ${BRANCH_NAME}/${COMMIT_ID}
          cp ../deployments/tests/reports/* ${BRANCH_NAME}/${COMMIT_ID}/
          mkdir -p ${BRANCH_NAME}/latest
          cp ../deployments/tests/reports/* ${BRANCH_NAME}/latest/
          git add .
          git commit -m "Add artifacts for commit $COMMIT_ID on branch $BRANCH_NAME"
          git push https://${GH_TOKEN}@github.com/${REPO_NAME}.git artifacts

  push-docker-hub:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then echo "ENVIRONMENT=production" >> $GITHUB_ENV; fi
          if [ "${{ github.ref }}" == "refs/heads/development" ]; then echo "ENVIRONMENT=development" >> $GITHUB_ENV; fi
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then echo "ENVIRONMENT=staging" >> $GITHUB_ENV; fi

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set Docker image version
        run: |
          DATE_UTC=$(date -u +"%Y%m%dT%H%M%SZ")
          echo "VERSION=${DATE_UTC}" >> $GITHUB_ENV

      - name: Pull existing images
        run: |
          set -e
          if docker pull ${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.ENVIRONMENT }}-latest; then
            docker tag ${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.ENVIRONMENT }}-latest ${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.ENVIRONMENT }}-rollback
            docker push ${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.ENVIRONMENT }}-rollback
          else
            echo "No existing image to tag as rollback"
          fi

      - name: Build Docker image
        run: |
          IMAGE_NAME="${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.ENVIRONMENT }}-${{ env.VERSION }}"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          docker build -f deployments/Dockerfile.deploy -t "$IMAGE_NAME" .
          docker tag "$IMAGE_NAME" "${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.ENVIRONMENT }}-latest"

      - name: Run Docker container to test
        run: |
          docker run -d --name test_container $IMAGE_NAME
          docker ps -a
          docker rm -f test_container

      - name: Push Docker image
        if: success()
        run: |
          docker push "$IMAGE_NAME"
          docker push "${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.ENVIRONMENT }}-latest"
          if docker images | grep -q "${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.ENVIRONMENT }}-rollback"; then
            docker push "${{ vars.DOCKERHUB_REPOSITORY }}:${{ env.ENVIRONMENT }}-rollback"
          fi

  push-digital-ocean:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then echo "ENVIRONMENT=production" >> $GITHUB_ENV; fi
          if [ "${{ github.ref }}" == "refs/heads/development" ]; then echo "ENVIRONMENT=development" >> $GITHUB_ENV; fi
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then echo "ENVIRONMENT=staging" >> $GITHUB_ENV; fi

      - name: Login to DigitalOcean Container Registry
        run: |
          echo ${{ secrets.DIGITALOCEAN_TOKEN }} | docker login registry.digitalocean.com -u do --password-stdin

      - name: Set Docker image version
        run: |
          DATE_UTC=$(date -u +"%Y%m%dT%H%M%SZ")
          echo "VERSION=${DATE_UTC}" >> $GITHUB_ENV

      - name: Pull existing images
        run: |
          set -e
          if docker pull registry.digitalocean.com/${{ vars.DIGITALOCEAN_REPOSITORY }}:${{ env.ENVIRONMENT }}-latest; then
            docker tag registry.digitalocean.com/${{ vars.DIGITALOCEAN_REPOSITORY }}:${{ env.ENVIRONMENT }}-latest registry.digitalocean.com/${{ vars.DIGITALOCEAN_REPOSITORY }}:${{ env.ENVIRONMENT }}-rollback
            docker push registry.digitalocean.com/${{ vars.DIGITALOCEAN_REPOSITORY }}:${{ env.ENVIRONMENT }}-rollback
          else
            echo "No existing image to tag as rollback"
          fi

      - name: Build Docker image
        run: |
          IMAGE_NAME="registry.digitalocean.com/${{ vars.DIGITALOCEAN_REPOSITORY }}:${{ env.ENVIRONMENT }}-${{ env.VERSION }}"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          docker build -f deployments/Dockerfile.deploy -t "$IMAGE_NAME" .
          docker tag "$IMAGE_NAME" "registry.digitalocean.com/${{ vars.DIGITALOCEAN_REPOSITORY }}:${{ env.ENVIRONMENT }}-latest"

      - name: Run Docker container to test
        run: |
          docker run -d --name test_container $IMAGE_NAME
          docker ps -a
          docker rm -f test_container

      - name: Push Docker image
        if: success()
        run: |
          docker push "$IMAGE_NAME"
          docker push "registry.digitalocean.com/${{ vars.DIGITALOCEAN_REPOSITORY }}:${{ env.ENVIRONMENT }}-latest"
          if docker images | grep -q "registry.digitalocean.com/${{ vars.DIGITALOCEAN_REPOSITORY }}:${{ env.ENVIRONMENT }}-rollback"; then
            docker push "registry.digitalocean.com/${{ vars.DIGITALOCEAN_REPOSITORY }}:${{ env.ENVIRONMENT }}-rollback"
          fi
